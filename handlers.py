#######################################
#      core functions for handlers    #
#######################################

import logging
from datetime import datetime, timedelta
from time import strftime
from uuid import uuid4

from telegram import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    InlineQueryResultArticle,
    InputTextMessageContent,
    KeyboardButton,
    ParseMode,
)

from data_model import (
    Game,
    League,
    User,
    engine,
    games_table,
    leagues_table,
    users_table,
)
from functions import get_current_leagues, get_games_current_league, get_league_baner
from sqlalchemy.orm import mapper, sessionmaker

""" Mapper """
mapper(User, users_table)


""" –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã """
reply_start_kb = [
    [InlineKeyboardButton(f"–¢–£–†–ù–ò–†–´ üèÜ", switch_inline_query_current_chat="current")],
    [InlineKeyboardButton(f"–ù–ê–ô–¢–ò üîé", switch_inline_query_current_chat="")],
]

markup = InlineKeyboardMarkup(reply_start_kb)


def start(update, context):
    logging.info("–í—ã–∑–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è —Å—Ç–∞—Ä—Ç")
    reply_text = "–ü—Ä–∏–≤–µ—Ç! –ú—ã —Ä–∞–¥—ã, —á—Ç–æ —Ç—ã —Å –Ω–∞–º–∏! üéâ"
    update.message.reply_text(reply_text, reply_markup=markup)


def help_me(update, context):
    logging.info("–í—ã–∑–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è help")
    update.effective_message.reply_text(
        """–≠—Ç–æ –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π –∫–∏–±–µ—Ä—Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–π –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã - DOTA2
–° –µ–≥–æ –ø–æ–º–æ—â—å—é –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–µ–∫—É—â–∏—Ö –∏ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤ –∏ –∏–≥—Ä,
–¥–ª—è –∫–∞–∂–¥–æ–π –∏–≥—Ä—ã –º–æ–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ, –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø
–∫ –≤–∏–¥–µ–æ –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–π —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏.–ö–æ–º–∞–Ω–¥–∞ /start - –≤—ã–∑—ã–≤–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, 
–æ—Ç–æ–±—Ä–∞–∂–∞—é—â—É—é —Ç–µ–∫—É—â–∏–µ —Ç—É—Ä–Ω–∏—Ä—ã –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—â—É—é –ø–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é.
–î–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ –±—É–¥–µ—Ç –≤—ã–≤–µ–¥–µ–Ω —Å–ø–∏—Å–æ–∫ –∏–≥—Ä, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –∏–≥—Ä–æ–π –º–æ–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è
–Ω–∞ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—é. –ó–∞ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –¥–æ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã –≤–∞–º –ø—Ä–∏–¥—ë—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ."""
    )


def get_tournament_info(update, context):
    message = update.message.text
    reply_games_kb = []
    games = get_games_current_league(message.split("about ")[1])
    for game in games:
        reply_games_kb.append(
            [
                InlineKeyboardButton(
                    f'üîπ{game[1]} ‚öîÔ∏è üîπ{game[2]}  üïî{game[4].strftime("%b-%d %H:%M")}',
                    callback_data=game[5],
                    parse_mode=ParseMode.MARKDOWN,
                )
            ]
        )
    markup = InlineKeyboardMarkup(reply_games_kb)
    baner_url = get_league_baner(message.split("about ")[1])
    if reply_games_kb:
        context.bot.send_photo(
            chat_id=update.message.chat_id,
            photo=baner_url,
            caption=f'*{message.split("about ")[1]}*',
            reply_markup=markup,
            parse_mode=ParseMode.MARKDOWN,
        )
    else:
        update.message.reply_text(
            f'*No found games for {message.split("about ")[1]}*', parse_mode=ParseMode.MARKDOWN,
        )


def leagues_search(query):
    leagues_list = get_current_leagues()
    result = []
    for league in leagues_list:
        if query in league[0]:
            result.append(league)
    return result


def inlinequery(update, context):
    query = update.inline_query.query
    if query == "current":
        result = []
        current_leagues = get_current_leagues()
        for item in current_leagues:
            result.append(
                InlineQueryResultArticle(
                    id=uuid4(),
                    title=item[0].strip(),
                    description=f"Period: {item[3]}, prize: ${item[2]}",
                    thumb_url=item[1],
                    input_message_content=InputTextMessageContent(
                        f"OK, search informations about '{item[0].strip()}'"
                    ),
                )
            )
        update.inline_query.answer(result)
    else:
        result = []
        user_text = update.inline_query.query
        result_search = leagues_search(user_text)
        for item in result_search:
            result.append(
                InlineQueryResultArticle(
                    id=uuid4(),
                    title=item[0],
                    description=f"Period: {item[3]}, prize: ${item[2]}",
                    thumb_url=item[1],
                    input_message_content=InputTextMessageContent(
                        f"OK, search informations about '{item[0].strip()}'"
                    ),
                )
            )
        update.inline_query.answer(result)


# –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–≥—Ä—É
def ikb_subscribe(update, context):
    ikb_query = update.callback_query
    user_choice = ikb_query.data
    Session = sessionmaker(bind=engine)
    session = Session()
    game = session.query(Game).filter(Game.game_id == user_choice).first()
    text = f"–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ –∏–≥—Ä–µ {game.team1} vs {game.team2}"
    context.bot.send_message(text=text, chat_id=ikb_query.message.chat.id)
    ikb_newUser = User(int(ikb_query.message.chat.id), int(ikb_query.data))
    session.add(ikb_newUser)
    session.commit()
    get_game_start_twitch(context)


def callback_alarm(context, chat_id, team1, team2, twitch_channel):
    context.bot.send_message(
        chat_id=chat_id,
        text=f"–°–∫–æ—Ä–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –∏–≥—Ä–∞ {team1} vs {team2} –Ω–∞ –∫–∞–Ω–∞–ª–µ https://www.twitch.tv/{twitch_channel}",
    )


# –≤—ã–∑–æ–≤ –∏–∑ –±–∞–∑—ã —é–∑–µ—Ä–∞ —Å –ø–æ–¥–ø–∏—Å–∫–æ–π, —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å games –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
# –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã + —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ç–≤–∏—á –∫–∞–Ω–∞–ª
def get_game_start_twitch(context):
    Session = sessionmaker(bind=engine)
    session = Session()
    notification_30 = datetime.now() + timedelta(hours=60)  # –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–æ —É–¥–∞–ª–∏—Ç—å
    print(notification_30)
    for game_id, start_time, team1, team2, twitch_channel in session.query(
        Game.game_id, Game.start_time, Game.team1, Game.team2, Game.twitch_channel
    ).filter(Game.start_time <= notification_30, Game.start_time >= datetime.now()):
        if game_id:
            for user_id, game_id in session.query(User.user_id, User.game_id).filter(
                User.game_id == game_id
            ):
                game_timer = int((start_time - datetime.now()).total_seconds())
                context.job_queue.run_once(
                    callback_alarm(context, user_id, team1, team2, twitch_channel), 5
                )
    session.commit()


# –ø–µ—Ä–µ–¥–µ–ª–∞—Ç—å –Ω–∞ —É–≤–¥–æ–º–ª–µ–Ω–∏—è –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ
"""def send_updates(context, job):
        subscrubeJob = updater.job_queue
    context.job_morning = subscrubeJob.run_once()"""


def set_alarm(update, context):
    try:
        seconds = abs(int(context.args[0]))
        context.job_queue.run_once(alarm, seconds, context=update.message.chat_id)
    except (IndexError, ValueError):
        update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /alarm")


def alarm(context):
    context.bot.send_message(chat_id=context.job.context, text="–°—Ä–∞–±–æ—Ç–∞–ª –±—É–¥–∏–ª—å–Ω–∏–∫!")
